// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	jewerly "github.com/zhashkevych/jewelry-shop-backend"
	reflect "reflect"
)

// MockAdmin is a mock of Admin interface
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// Authorize mocks base method
func (m *MockAdmin) Authorize(login, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", login, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize
func (mr *MockAdminMockRecorder) Authorize(login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAdmin)(nil).Authorize), login, passwordHash)
}

// MockProduct is a mock of Product interface
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockProduct) Create(product jewerly.CreateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockProductMockRecorder) Create(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProduct)(nil).Create), product)
}

// GetAll mocks base method
func (m *MockProduct) GetAll(filters jewerly.GetAllProductsFilters) (jewerly.ProductsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", filters)
	ret0, _ := ret[0].(jewerly.ProductsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockProductMockRecorder) GetAll(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProduct)(nil).GetAll), filters)
}

// GetById mocks base method
func (m *MockProduct) GetById(id int, language string) (jewerly.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, language)
	ret0, _ := ret[0].(jewerly.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockProductMockRecorder) GetById(id, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProduct)(nil).GetById), id, language)
}

// Update mocks base method
func (m *MockProduct) Update(id int, inp jewerly.UpdateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockProductMockRecorder) Update(id, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProduct)(nil).Update), id, inp)
}

// Delete mocks base method
func (m *MockProduct) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProductMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProduct)(nil).Delete), id)
}

// CreateImage mocks base method
func (m *MockProduct) CreateImage(url, altText string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", url, altText)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage
func (mr *MockProductMockRecorder) CreateImage(url, altText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockProduct)(nil).CreateImage), url, altText)
}

// GetProductImages mocks base method
func (m *MockProduct) GetProductImages(productId int) ([]jewerly.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductImages", productId)
	ret0, _ := ret[0].([]jewerly.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductImages indicates an expected call of GetProductImages
func (mr *MockProductMockRecorder) GetProductImages(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductImages", reflect.TypeOf((*MockProduct)(nil).GetProductImages), productId)
}

// MockOrder is a mock of Order interface
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOrder) Create(input jewerly.CreateOrderInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOrderMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrder)(nil).Create), input)
}

// GetOrderProducts mocks base method
func (m *MockOrder) GetOrderProducts(items []jewerly.OrderItem) ([]jewerly.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderProducts", items)
	ret0, _ := ret[0].([]jewerly.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderProducts indicates an expected call of GetOrderProducts
func (mr *MockOrderMockRecorder) GetOrderProducts(items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderProducts", reflect.TypeOf((*MockOrder)(nil).GetOrderProducts), items)
}

// CreateTransaction mocks base method
func (m *MockOrder) CreateTransaction(transactionId, cardMask, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transactionId, cardMask, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction
func (mr *MockOrderMockRecorder) CreateTransaction(transactionId, cardMask, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockOrder)(nil).CreateTransaction), transactionId, cardMask, status)
}

// GetOrderId mocks base method
func (m *MockOrder) GetOrderId(transactionId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderId", transactionId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderId indicates an expected call of GetOrderId
func (mr *MockOrderMockRecorder) GetOrderId(transactionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderId", reflect.TypeOf((*MockOrder)(nil).GetOrderId), transactionId)
}

// GetAll mocks base method
func (m *MockOrder) GetAll(arg0 jewerly.GetAllOrdersFilters) (jewerly.OrderList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(jewerly.OrderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockOrderMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrder)(nil).GetAll), arg0)
}

// GetById mocks base method
func (m *MockOrder) GetById(id int) (jewerly.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(jewerly.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockOrderMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockOrder)(nil).GetById), id)
}
