// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	jewerly "github.com/zhashkevych/jewelry-shop-backend"
	io "io"
	reflect "reflect"
)

// MockAdmin is a mock of Admin interface
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// SignIn mocks base method
func (m *MockAdmin) SignIn(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn
func (mr *MockAdminMockRecorder) SignIn(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAdmin)(nil).SignIn), login, password)
}

// ParseToken mocks base method
func (m *MockAdmin) ParseToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseToken indicates an expected call of ParseToken
func (mr *MockAdminMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAdmin)(nil).ParseToken), token)
}

// MockProduct is a mock of Product interface
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockProduct) Create(arg0 jewerly.CreateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockProductMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProduct)(nil).Create), arg0)
}

// GetAll mocks base method
func (m *MockProduct) GetAll(arg0 jewerly.GetAllProductsFilters) (jewerly.ProductsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(jewerly.ProductsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockProductMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProduct)(nil).GetAll), arg0)
}

// GetById mocks base method
func (m *MockProduct) GetById(id int, language string) (jewerly.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, language)
	ret0, _ := ret[0].(jewerly.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockProductMockRecorder) GetById(id, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProduct)(nil).GetById), id, language)
}

// Update mocks base method
func (m *MockProduct) Update(id int, inp jewerly.UpdateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockProductMockRecorder) Update(id, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProduct)(nil).Update), id, inp)
}

// Delete mocks base method
func (m *MockProduct) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProductMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProduct)(nil).Delete), id)
}

// UploadImage mocks base method
func (m *MockProduct) UploadImage(ctx context.Context, file io.Reader, size int64, contentType string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, file, size, contentType)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage
func (mr *MockProductMockRecorder) UploadImage(ctx, file, size, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockProduct)(nil).UploadImage), ctx, file, size, contentType)
}

// MockOrder is a mock of Order interface
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOrder) Create(arg0 jewerly.CreateOrderInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOrderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrder)(nil).Create), arg0)
}

// ProcessCallback mocks base method
func (m *MockOrder) ProcessCallback(arg0 jewerly.TransactionCallbackInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessCallback", arg0)
}

// ProcessCallback indicates an expected call of ProcessCallback
func (mr *MockOrderMockRecorder) ProcessCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessCallback", reflect.TypeOf((*MockOrder)(nil).ProcessCallback), arg0)
}

// GetAll mocks base method
func (m *MockOrder) GetAll(arg0 jewerly.GetAllOrdersFilters) (jewerly.OrderList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(jewerly.OrderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockOrderMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrder)(nil).GetAll), arg0)
}

// GetById mocks base method
func (m *MockOrder) GetById(id int) (jewerly.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(jewerly.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockOrderMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockOrder)(nil).GetById), id)
}

// MockEmail is a mock of Email interface
type MockEmail struct {
	ctrl     *gomock.Controller
	recorder *MockEmailMockRecorder
}

// MockEmailMockRecorder is the mock recorder for MockEmail
type MockEmailMockRecorder struct {
	mock *MockEmail
}

// NewMockEmail creates a new mock instance
func NewMockEmail(ctrl *gomock.Controller) *MockEmail {
	mock := &MockEmail{ctrl: ctrl}
	mock.recorder = &MockEmailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmail) EXPECT() *MockEmailMockRecorder {
	return m.recorder
}

// SendOrderInfoSupport mocks base method
func (m *MockEmail) SendOrderInfoSupport(inp jewerly.OrderInfoEmailInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrderInfoSupport", inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrderInfoSupport indicates an expected call of SendOrderInfoSupport
func (mr *MockEmailMockRecorder) SendOrderInfoSupport(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrderInfoSupport", reflect.TypeOf((*MockEmail)(nil).SendOrderInfoSupport), inp)
}

// SendOrderInfoCustomer mocks base method
func (m *MockEmail) SendOrderInfoCustomer(inp jewerly.OrderInfoEmailInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrderInfoCustomer", inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrderInfoCustomer indicates an expected call of SendOrderInfoCustomer
func (mr *MockEmailMockRecorder) SendOrderInfoCustomer(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrderInfoCustomer", reflect.TypeOf((*MockEmail)(nil).SendOrderInfoCustomer), inp)
}

// SendPaymentInfoSupport mocks base method
func (m *MockEmail) SendPaymentInfoSupport(inp jewerly.PaymentInfoEmailInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPaymentInfoSupport", inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPaymentInfoSupport indicates an expected call of SendPaymentInfoSupport
func (mr *MockEmailMockRecorder) SendPaymentInfoSupport(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPaymentInfoSupport", reflect.TypeOf((*MockEmail)(nil).SendPaymentInfoSupport), inp)
}

// SendPaymentInfoCustomer mocks base method
func (m *MockEmail) SendPaymentInfoCustomer(inp jewerly.PaymentInfoEmailInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPaymentInfoCustomer", inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPaymentInfoCustomer indicates an expected call of SendPaymentInfoCustomer
func (mr *MockEmailMockRecorder) SendPaymentInfoCustomer(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPaymentInfoCustomer", reflect.TypeOf((*MockEmail)(nil).SendPaymentInfoCustomer), inp)
}
